package test_suite

import (
	"PQC-Master-Thesis/internal/common"
	"PQC-Master-Thesis/pkg/vanilla"
	"bytes"
	"testing"
)

func TestShake128CSPRNG(t *testing.T) {
	instance, err := vanilla.NewCROSS(common.RSDP_1_BALANCED)
	if err != nil {
		t.Fatalf("Failed to create CROSS: %v", err)
	}
	seed := []byte("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
	T := 256
	domain_sep := 0
	output_len := 64
	dsc := uint16(domain_sep + 3*T + 2)
	randomBytes := instance.CSPRNG(seed, output_len, dsc)
	// Golang generated hashes
	go_seed_e := randomBytes[:32]
	go_seed_pk := randomBytes[32:]
	// C generated hashes
	c_seed_e := []byte{15, 121, 106, 185, 65, 60, 38, 57, 192, 11, 100, 5, 36, 234, 50, 253, 115, 61, 99, 71, 54, 20, 106, 223, 64, 83, 75, 131, 107, 171, 179, 163}
	c_seed_pk := []byte{197, 184, 200, 221, 6, 37, 92, 70, 124, 127, 54, 125, 11, 163, 142, 207, 26, 21, 208, 178, 226, 28, 152, 49, 104, 87, 51, 136, 32, 87, 109, 243}
	// Assertions
	if !bytes.Equal(go_seed_e, c_seed_e) {
		t.Errorf("go_seed_e and c_seed_e do not match:\nGo: %v\nC:  %v", go_seed_e, c_seed_e)
	}

	if !bytes.Equal(go_seed_pk, c_seed_pk) {
		t.Errorf("go_seed_pk and c_seed_pk do not match:\nGo: %v\nC:  %v", go_seed_pk, c_seed_pk)
	}
}

func TestShake256CSPRNG(t *testing.T) {
	instance, err := vanilla.NewCROSS(common.RSDP_3_BALANCED)
	if err != nil {
		t.Fatalf("Failed to create CROSS: %v", err)
	}
	seed := []byte("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
	T := 384
	domain_sep := 0
	output_len := 96
	dsc := uint16(domain_sep + 3*T + 2)
	randomBytes := instance.CSPRNG(seed, output_len, dsc)
	// Golang generated hashes
	go_seed_e := randomBytes[:48]
	go_seed_pk := randomBytes[48:]
	// C generated hashes
	c_seed_e := []byte{147, 238, 19, 229, 132, 25, 3, 81, 217, 50, 197, 252, 15, 121, 71, 77, 59, 160, 55, 163, 146, 103, 3, 167, 152, 130, 247, 60, 29, 204, 157, 69, 70, 35, 64, 96, 134, 142, 22, 254, 205, 197, 227, 165, 188, 249, 140, 130}
	c_seed_pk := []byte{252, 18, 4, 247, 69, 37, 146, 26, 108, 50, 74, 40, 51, 109, 52, 238, 94, 56, 18, 49, 143, 146, 119, 36, 49, 34, 218, 174, 138, 181, 109, 8, 128, 156, 164, 183, 60, 22, 239, 224, 21, 140, 175, 33, 17, 75, 55, 66}
	// Assertions
	if !bytes.Equal(go_seed_e, c_seed_e) {
		t.Errorf("go_seed_e and c_seed_e do not match:\nGo: %v\nC:  %v", go_seed_e, c_seed_e)
	}

	if !bytes.Equal(go_seed_pk, c_seed_pk) {
		t.Errorf("go_seed_pk and c_seed_pk do not match:\nGo: %v\nC:  %v", go_seed_pk, c_seed_pk)
	}
}

func TestShakeHash(t *testing.T) {
	instance, err := vanilla.NewCROSS(common.RSDP_1_BALANCED)
	if err != nil {
		t.Fatalf("Failed to create CROSS: %v", err)
	}
	seed := []byte("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
	output_len := 32
	dsc := uint16(32768)
	randomBytes := instance.CSPRNG(seed, output_len, dsc)
	c_hash := []byte{11, 27, 204, 128, 161, 51, 112, 71, 20, 71, 231, 138, 67, 128, 232, 30, 91, 74, 144, 188, 233, 72, 217, 222, 72, 43, 29, 79, 152, 82, 169, 125}
	if !bytes.Equal(randomBytes, c_hash) {
		t.Errorf("Hashes do not match:\nGo: %v\nC:  %v", randomBytes, c_hash)
	}
}

/*
	 outcommented due to csprng_fp_mat outputs T which vanilla.go can't handle
		func TestFpMat(t *testing.T) {
			instance, err := vanilla.NewCROSS(common.RSDP_1_BALANCED)
			if err != nil {
				t.Errorf("Error creating instance: %v", err)
			}
			seed := []byte("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
			mat := instance.CSPRNG_fp_mat(seed)
			c_mat := []int{15, 114, 41, 75, 27, 8, 15, 19, 57, 0, 47, 32, 86, 0, 9, 117, 50, 122, 79, 107, 51, 108, 17, 27, 20, 84, 125, 6, 52, 106, 82, 65, 107, 86, 78, 29, 90, 24, 46, 100, 93, 13, 20, 97, 101, 8, 95, 63, 54, 122, 45,
				24, 106, 113, 51, 13, 21, 32, 75, 21, 78, 3, 102, 24, 104, 46, 77, 65, 8, 100, 85, 54, 115, 37, 110, 25, 101, 85, 122, 59, 50, 33, 33, 39, 116, 96, 61, 82, 86, 91, 106, 107, 68, 124, 76, 107, 34, 65, 23, 38, 29, 81,
				29, 81, 98, 51, 81, 1, 11, 74, 26, 5, 19, 26, 46, 74, 69, 24, 29, 107, 76, 41, 84, 54, 8, 72, 87, 107, 10, 12, 124, 17, 0, 83, 107, 83, 31, 94, 63, 43, 101, 23, 103, 122, 49, 101, 62, 48, 40, 119, 42, 95, 2,
				108, 55, 78, 19, 0, 47, 38, 14, 43, 103, 14, 27, 69, 119, 50, 96, 48, 106, 89, 19, 56, 124, 11, 60, 106, 14, 94, 118, 19, 68, 17, 1, 36, 53, 29, 113, 57, 122, 81, 47, 59, 78, 5, 94, 106, 78, 99, 34, 1, 25, 83,
				73, 60, 29, 125, 65, 124, 10, 13, 61, 44, 9, 9, 99, 17, 2, 57, 13, 8, 71, 74, 63, 59, 83, 28, 0, 72, 118, 54, 105, 86, 50, 26, 47, 107, 123, 106, 71, 80, 26, 97, 72, 2, 62, 63, 118, 116, 36, 28, 40, 108, 11,
				50, 31, 24, 77, 23, 44, 56, 2, 37, 80, 32, 120, 17, 69, 107, 65, 14, 41, 58, 0, 125, 121, 2, 52, 98, 52, 60, 56, 35, 104, 47, 99, 92, 60, 24, 102, 115, 26, 17, 89, 73, 14, 30, 72, 104, 56, 55, 61, 3, 123, 124,
				123, 89, 53, 97, 4, 41, 27, 90, 115, 55, 83, 31, 27, 38, 10, 119, 82, 107, 82, 27, 27, 57, 119, 79, 126, 85, 125, 84, 1, 123, 63, 77, 6, 114, 78, 74, 74, 89, 82, 39, 74, 78, 97, 13, 120, 5, 29, 41, 71, 33, 122,
				17, 101, 118, 111, 113, 94, 8, 8, 117, 79, 20, 102, 76, 121, 17, 71, 2, 57, 88, 59, 9, 70, 56, 78, 53, 39, 41, 34, 125, 96, 58, 112, 107, 20, 50, 59, 119, 6, 29, 44, 122, 81, 26, 0, 24, 22, 115, 87, 1, 11, 84,
				54, 56, 61, 14, 26, 126, 52, 119, 8, 23, 79, 3, 31, 78, 85, 33, 126, 64, 4, 96, 101, 28, 46, 76, 99, 97, 38, 88, 3, 102, 57, 118, 94, 114, 59, 25, 54, 47, 96, 0, 36, 47, 79, 104, 42, 77, 23, 0, 54, 97, 80,
				77, 66, 44, 79, 117, 38, 31, 37, 77, 78, 46, 15, 108, 67, 98, 83, 79, 31, 109, 105, 7, 4, 86, 26, 86, 112, 27, 78, 91, 66, 43, 75, 104, 55, 61, 77, 65, 109, 11, 113, 36, 26, 101, 123, 103, 101, 9, 9, 123, 97, 20,
				120, 99, 65, 35, 28, 95, 19, 122, 20, 64, 87, 50, 120, 111, 101, 98, 88, 21, 113, 37, 89, 114, 106, 52, 68, 62, 114, 69, 106, 16, 61, 115, 27, 118, 11, 64, 31, 37, 8, 32, 115, 74, 113, 24, 101, 106, 113, 90, 41, 94, 94,
				82, 4, 5, 83, 113, 16, 87, 48, 85, 88, 23, 4, 107, 91, 28, 107, 37, 21, 16, 37, 26, 126, 125, 63, 120, 1, 29, 61, 30, 48, 0, 96, 41, 123, 4, 108, 50, 39, 106, 7, 106, 111, 101, 17, 11, 65, 52, 3, 112, 38, 78,
				1, 5, 25, 6, 96, 60, 33, 79, 47, 35, 11, 120, 55, 122, 114, 87, 76, 56, 74, 88, 14, 2, 41, 11, 8, 10, 11, 84, 94, 42, 124, 11, 25, 12, 73, 116, 100, 43, 55, 118, 29, 18, 29, 37, 53, 92, 116, 85, 35, 33, 115,
				73, 10, 119, 83, 60, 31, 0, 79, 83, 45, 7, 29, 78, 57, 4, 104, 111, 117, 76, 10, 86, 67, 109, 36, 36, 19, 36, 68, 60, 112, 90, 51, 71, 14, 22, 8, 102, 14, 72, 63, 94, 41, 22, 107, 51, 109, 90, 98, 73, 95, 123,
				80, 88, 49, 91, 104, 125, 56, 7, 38, 3, 32, 100, 46, 71, 9, 34, 126, 6, 104, 116, 100, 47, 35, 50, 79, 54, 62, 64, 74, 108, 116, 81, 77, 5, 95, 11, 58, 73, 94, 76, 120, 92, 70, 81, 93, 21, 98, 79, 2, 65, 67,
				60, 67, 17, 25, 21, 93, 66, 46, 95, 97, 88, 113, 68, 59, 79, 88, 30, 54, 11, 107, 120, 37, 80, 61, 87, 103, 108, 58, 33, 65, 2, 82, 11, 112, 116, 14, 67, 23, 67, 77, 85, 14, 18, 4, 56, 81, 122, 35, 118, 22, 93,
				36, 3, 106, 62, 28, 27, 59, 121, 74, 61, 51, 124, 54, 46, 60, 18, 60, 43, 60, 97, 5, 23, 95, 72, 27, 97, 1, 119, 71, 101, 124, 100, 11, 64, 10, 63, 56, 108, 72, 39, 34, 103, 3, 79, 104, 36, 42, 66, 56, 8, 4,
				96, 42, 32, 121, 108, 112, 32, 55, 45, 61, 34, 32, 61, 12, 86, 102, 26, 25, 104, 63, 58, 91, 3, 41, 3, 51, 62, 60, 111, 114, 32, 86, 21, 100, 58, 117, 69, 18, 35, 86, 62, 24, 89, 113, 58, 102, 53, 93, 56, 19, 107,
				109, 65, 27, 120, 77, 103, 24, 81, 66, 107, 2, 81, 68, 87, 76, 62, 70, 120, 44, 46, 37, 112, 1, 92, 13, 117, 40, 31, 62, 106, 13, 36, 96, 48, 89, 77, 79, 102, 84, 60, 73, 98, 74, 101, 94, 111, 86, 31, 30, 63, 25,
				51, 20, 91, 67, 1, 41, 55, 44, 36, 16, 45, 80, 74, 40, 70, 96, 41, 33, 71, 65, 118, 40, 61, 48, 110, 47, 32, 56, 116, 72, 37, 125, 83, 37, 26, 60, 120, 47, 37, 1, 25, 25, 85, 115, 49, 17, 125, 122, 97, 77, 91,
				16, 16, 41, 42, 78, 45, 34, 115, 41, 121, 94, 66, 18, 53, 26, 122, 83, 84, 84, 86, 77, 94, 90, 63, 71, 121, 52, 28, 64, 51, 90, 82, 77, 78, 116, 78, 39, 74, 123, 18, 90, 55, 2, 9, 110, 12, 100, 98, 95, 59, 27,
				47, 40, 70, 79, 45, 9, 7, 13, 123, 31, 78, 92, 74, 73, 14, 47, 125, 67, 31, 29, 73, 5, 123, 52, 40, 108, 98, 15, 29, 15, 82, 119, 106, 42, 99, 33, 85, 17, 46, 70, 44, 104, 112, 29, 110, 25, 43, 114, 90, 107, 87,
				71, 87, 35, 92, 41, 108, 23, 87, 12, 16, 52, 100, 38, 114, 120, 118, 19, 46, 102, 116, 112, 113, 9, 14, 103, 110, 32, 3, 34, 96, 116, 22, 117, 62, 34, 17, 103, 47, 66, 34, 26, 114, 90, 11, 118, 124, 84, 47, 24, 87, 58,
				25, 112, 116, 25, 35, 108, 102, 4, 25, 41, 9, 106, 97, 84, 111, 32, 79, 71, 58, 110, 48, 12, 78, 98, 111, 104, 9, 39, 56, 74, 6, 4, 68, 70, 49, 112, 6, 85, 58, 117, 39, 52, 29, 107, 11, 114, 26, 4, 15, 20, 108,
				45, 81, 82, 81, 57, 103, 104, 60, 46, 31, 60, 28, 79, 23, 13, 57, 93, 85, 26, 110, 96, 108, 21, 15, 53, 77, 94, 61, 106, 54, 49, 94, 39, 62, 109, 120, 16, 8, 45, 41, 32, 125, 107, 43, 120, 101, 110, 110, 27, 78, 56,
				69, 72, 52, 113, 12, 105, 93, 78, 34, 34, 18, 18, 46, 53, 46, 29, 113, 60, 124, 11, 39, 26, 15, 35, 29, 62, 100, 17, 27, 70, 99, 78, 73, 68, 86, 59, 111, 95, 81, 6, 123, 109, 44, 102, 114, 101, 96, 110, 34, 37, 84,
				22, 27, 124, 75, 74, 69, 123, 13, 41, 56, 104, 15, 114, 103, 116, 46, 78, 42, 18, 1, 104, 23, 58, 22, 115, 96, 40, 113, 31, 40, 67, 30, 43, 5, 24, 33, 119, 82, 67, 54, 53, 65, 10, 50, 34, 60, 85, 52, 16, 66, 67,
				27, 49, 19, 101, 65, 92, 58, 114, 9, 7, 78, 3, 81, 102, 101, 89, 39, 63, 61, 45, 76, 97, 107, 10, 95, 22, 110, 16, 49, 57, 14, 17, 11, 80, 98, 101, 21, 89, 122, 66, 65, 7, 121, 52, 62, 15, 72, 94, 35, 8, 122,
				102, 16, 21, 105, 11, 54, 30, 48, 75, 74, 83, 59, 66, 35, 74, 72, 51, 54, 75, 101, 104, 67, 10, 76, 50, 98, 78, 118, 16, 7, 36, 46, 86, 50, 93, 9, 76, 28, 113, 55, 99, 76, 32, 23, 73, 75, 65, 16, 25, 57, 28,
				43, 83, 117, 121, 103, 18, 56, 123, 66, 61, 57, 86, 70, 113, 44, 118, 39, 80, 90, 14, 119, 39, 76, 53, 79, 65, 115, 125, 60, 19, 118, 89, 2, 47, 20, 44, 75, 121, 88, 46, 83, 54, 70, 114, 6, 105, 66, 101, 10, 117, 18,
				50, 111, 20, 111, 100, 90, 105, 86, 4, 72, 22, 105, 47, 14, 91, 44, 45, 90, 121, 30, 87, 122, 63, 50, 111, 94, 125, 31, 2, 61, 74, 110, 88, 13, 118, 105, 17, 92, 86, 20, 46, 113, 42, 84, 44, 20, 4, 99, 111, 56, 62,
				6, 48, 123, 35, 93, 15, 20, 7, 126, 89, 52, 11, 74, 30, 61, 113, 17, 69, 57, 22, 38, 98, 79, 98, 102, 72, 28, 53, 50, 61, 83, 40, 90, 23, 32, 23, 7, 83, 87, 4, 25, 52, 116, 52, 99, 17, 80, 41, 27, 34, 68,
				35, 53, 18, 77, 113, 53, 80, 50, 120, 97, 119, 15, 16, 36, 21, 45, 59, 96, 20, 49, 104, 40, 51, 38, 36, 16, 24, 6, 104, 72, 115, 110, 69, 43, 40, 29, 79, 96, 65, 11, 22, 78, 60, 57, 73, 107, 105, 98, 119, 69, 111,
				120, 65, 110, 107, 108, 4, 48, 45, 76, 42, 67, 8, 86, 10, 51, 72, 80, 105, 124, 5, 16, 105, 117, 2, 66, 41, 44, 95, 124, 2, 126, 112, 48, 123, 94, 77, 8, 67, 89, 31, 112, 74, 48, 83, 64, 122, 31, 26, 81, 43, 118,
				35, 77, 70, 78, 99, 16, 98, 99, 30, 125, 6, 83, 62, 4, 21, 36, 20, 63, 123, 109, 38, 102, 80, 57, 106, 95, 53, 37, 115, 123, 17, 121, 103, 20, 116, 122, 40, 71, 72, 87, 37, 36, 77, 72, 61, 120, 109, 103, 10, 99, 37,
				117, 22, 19, 107, 26, 57, 73, 116, 97, 98, 65, 67, 103, 55, 27, 86, 4, 48, 16, 94, 111, 36, 61, 21, 0, 15, 9, 67, 57, 82, 119, 123, 121, 29, 89, 111, 72, 34, 60, 1, 36, 106, 63, 74, 21, 73, 4, 23, 87, 33, 94,
				125, 115, 90, 53, 19, 30, 11, 98, 53, 101, 126, 70, 112, 20, 37, 94, 114, 3, 73, 8, 66, 79, 123, 74, 18, 18, 35, 20, 19, 35, 93, 21, 52, 125, 111, 58, 73, 70, 82, 37, 111, 19, 54, 110, 93, 67, 44, 72, 77, 18, 76,
				57, 112, 27, 34, 78, 55, 45, 26, 31, 8, 6, 62, 103, 63, 89, 102, 23, 75, 32, 1, 23, 44, 58, 0, 9, 4, 110, 77, 25, 56, 7, 54, 119, 108, 30, 124, 102, 1, 36, 73, 126, 17, 110, 40, 91, 79, 41, 23, 13, 109, 17,
				20, 50, 79, 89, 44, 75, 111, 88, 7, 36, 103, 74, 22, 26, 84, 76, 118, 87, 126, 48, 28, 107, 81, 55, 17, 104, 2, 117, 94, 28, 46, 121, 8, 31, 124, 94, 51, 14, 58, 92, 69, 6, 35, 44, 31, 58, 24, 18, 11, 82, 117,
				126, 43, 14, 72, 110, 108, 61, 56, 107, 76, 78, 11, 58, 10, 125, 115, 75, 12, 111, 36, 62, 67, 104, 11, 58, 0, 108, 42, 30, 48, 22, 41, 98, 18, 48, 119, 120, 91, 92, 83, 18, 113, 113, 97, 25, 58, 94, 104, 84, 39, 115,
				55, 2, 42, 45, 15, 96, 112, 89, 117, 55, 95, 106, 99, 120, 87, 70, 4, 82, 107, 31, 101, 80, 25, 126, 67, 111, 120, 37, 19, 94, 92, 118, 90, 114, 113, 67, 79, 114, 15, 14, 51, 19, 103, 53, 111, 20, 100, 74, 21, 28, 92,
				11, 50, 110, 65, 107, 65, 44, 4, 9, 121, 52, 122, 88, 46, 75, 106, 29, 37, 94, 68, 78, 116, 47, 33, 31, 97, 110, 104, 71, 97, 96, 87, 81, 43, 51, 109, 39, 26, 88, 19, 104, 77, 61, 1, 9, 75, 3, 36, 27, 34, 22,
				103, 38, 62, 34, 123, 3, 59, 7, 35, 43, 28, 43, 11, 123, 11, 117, 56, 47, 30, 88, 47, 77, 20, 89, 16, 81, 31, 108, 27, 27, 90, 90, 53, 122, 58, 13, 99, 126, 53, 69, 98, 26, 110, 18, 102, 76, 54, 38, 75, 66, 102,
				116, 5, 68, 97, 18, 107, 93, 76, 124, 44, 90, 71, 88, 79, 59, 36, 6, 90, 90, 81, 40, 48, 2, 54, 73, 68, 93, 99, 4, 96, 97, 71, 58, 54, 121, 64, 67, 18, 60, 34, 3, 40, 81, 4, 63, 42, 64, 106, 54, 70, 114,
				50, 56, 105, 76, 66, 117, 97, 119, 118, 54, 120, 106, 92, 125, 15, 56, 116, 37, 12, 104, 113, 124, 72, 50, 43, 49, 32, 63, 48, 112, 16, 0, 19, 105, 14, 98, 121, 119, 22, 78, 20, 24, 10, 63, 69, 11, 21, 71, 118, 67, 13,
				28, 125, 9, 61, 48, 81, 44, 126, 50, 18, 112, 44, 79, 31, 56, 94, 120, 78, 24, 52, 124, 97, 31, 72, 109, 115, 92, 46, 110, 47, 104, 116, 108, 104, 50, 48, 89, 54, 116, 88, 97, 119, 91, 95, 65, 109, 45, 22, 28, 42, 111,
				43, 119, 107, 0, 103, 125, 85, 36, 63, 94, 103, 91, 39, 62, 26, 85, 84, 75, 22, 66, 98, 32, 45, 112, 108, 64, 30, 49, 120, 18, 88, 24, 125, 41, 5, 40, 80, 19, 92, 34, 71, 82, 80, 93, 83, 62, 119, 44, 59, 33, 109,
				100, 85, 47, 57, 26, 61, 54, 36, 121, 1, 73, 75, 69, 67, 31, 71, 68, 62, 100, 91, 32, 66, 110, 50, 27, 67, 73, 39, 90, 40, 28, 28, 33, 122, 17, 34, 11, 33, 126, 73, 33, 69, 121, 66, 34, 46, 113, 34, 11, 83, 62,
				36, 46, 65, 77, 69, 80, 124, 89, 72, 39, 77, 88, 41, 14, 88, 96, 12, 25, 19, 42, 86, 93, 8, 70, 37, 5, 8, 0, 3, 42, 96, 122, 47, 16, 4, 80, 87, 35, 126, 91, 122, 74, 124, 92, 53, 2, 21, 14, 89, 85, 82,
				1, 19, 10, 54, 19, 61, 23, 6, 48, 3, 65, 87, 94, 17, 88, 22, 101, 102, 75, 79, 89, 126, 106, 66, 118, 119, 2, 90, 83, 14, 33, 69, 70, 105, 105, 11, 21, 68, 82, 109, 53, 108, 34, 88, 74, 118, 6, 12, 117, 110, 59,
				74, 75, 110, 32, 101, 0, 24, 76, 5, 44, 103, 77, 59, 12, 45, 37, 16, 4, 28, 3, 18, 33, 60, 115, 77, 9, 14, 16, 101, 55, 76, 72, 97, 39, 44, 0, 14, 77, 121, 85, 55, 101, 11, 5, 125, 80, 35, 33, 95, 56, 65,
				61, 84, 76, 123, 117, 98, 88, 76, 9, 74, 98, 84, 108, 56, 29, 58, 114, 126, 47, 77, 50, 125, 2, 79, 88, 36, 25, 47, 60, 118, 14, 68, 122, 63, 21, 84, 0, 115, 123, 113, 119, 45, 68, 97, 16, 60, 112, 53, 11, 10, 89,
				80, 64, 71, 59, 8, 54, 111, 118, 13, 117, 44, 83, 123, 46, 110, 54, 107, 17, 28, 93, 12, 56, 77, 120, 21, 69, 31, 112, 14, 94, 79, 90, 101, 115, 109, 109, 93, 111, 61, 100, 92, 55, 9, 85, 7, 58, 97, 78, 14, 76, 77,
				112, 123, 71, 41, 25, 2, 91, 76, 61, 60, 61, 7, 59, 99, 121, 11, 60, 48, 46, 23, 77, 112, 17, 38, 9, 98, 69, 42, 23, 94, 67, 69, 37, 4, 51, 59, 123, 8, 34, 94, 66, 3, 21, 36, 42, 1, 119, 58, 32, 0, 12,
				66, 51, 113, 94, 126, 33, 22, 66, 14, 102, 14, 24, 2, 69, 62, 4, 43, 5, 28, 0, 31, 118, 87, 39, 68, 8, 43, 99, 45, 44, 99, 34, 105, 43, 56, 87, 49, 56, 46, 19, 8, 105, 15, 2, 49, 68, 56, 79, 59, 86, 14,
				23, 12, 82, 31, 31, 78, 31, 19, 105, 70, 11, 7, 96, 6, 38, 27, 16, 119, 106, 110, 111, 72, 103, 27, 57, 30, 34, 78, 55, 96, 77, 31, 7, 2, 60, 107, 34, 33, 117, 76, 89, 102, 49, 52, 32, 30, 27, 37, 8, 73, 35,
				108, 86, 48, 104, 85, 73, 11, 119, 126, 56, 39, 5, 94, 82, 123, 10, 39, 114, 11, 119, 45, 48, 12, 22, 76, 55, 79, 14, 67, 75, 48, 12, 87, 85, 38, 39, 113, 126, 58, 126, 104, 6, 60, 95, 33, 40, 20, 90, 28, 76, 56,
				79, 56, 45, 118, 64, 98, 42, 16, 108, 63, 35, 94, 20, 94, 89, 59, 103, 123, 3, 65, 2, 56, 33, 26, 101, 74, 65, 23, 51, 65, 18, 49, 5, 10, 99, 40, 49, 32, 98, 83, 16, 26, 29, 24, 43, 111, 50, 95, 88, 119, 22,
				126, 58, 5, 115, 111, 8, 110, 45, 62, 118, 119, 91, 123, 4, 17, 77, 38, 115, 84, 45, 71, 5, 52, 56, 76, 88, 81, 27, 107, 14, 49, 97, 105, 102, 86, 73, 19, 91, 94, 120, 40, 101, 95, 55, 14, 29, 62, 126, 96, 114, 2,
				92, 46, 62, 87, 22, 23, 24, 31, 54, 52, 63, 91, 109, 19, 106, 35, 67, 98, 59, 94, 114, 84, 11, 56, 97, 4, 107, 95, 58, 64, 10, 9, 13, 57, 110, 42, 11, 63, 56, 71, 121, 75, 105, 58, 85, 42, 124, 19, 0, 18, 40,
				80, 96, 6, 24, 73, 38, 42, 90, 119, 75, 25, 110, 33, 20, 118, 120, 50, 100, 11, 59, 120, 117, 11, 12, 40, 92, 46, 54, 95, 15, 11, 6, 14, 123, 80, 77, 2, 67, 11, 66, 50, 42, 56, 25, 48, 97, 37, 10, 66, 112, 115,
				69, 118, 69, 52, 67, 18, 15, 126, 42, 55, 46, 23, 116, 89, 123, 59, 15, 67, 44, 7, 45, 115, 25, 24, 43, 79, 59, 90, 61, 71, 47, 36, 61, 29, 66, 57, 109, 29, 4, 42, 52, 98, 125, 14, 121, 76, 90, 84, 18, 56, 124,
				23, 13, 5, 37, 19, 56, 10, 61, 70, 8, 72, 103, 103, 18, 119, 55, 118, 83, 75, 19, 46, 33, 90, 9, 55, 73, 2, 12, 41, 47, 99, 6, 58, 117, 5, 108, 121, 119, 30, 53, 28, 38, 91, 20, 111, 81, 0, 83, 30, 72, 21,
				65, 48, 11, 87, 75, 17, 43, 30, 15, 93, 109, 99, 47, 96, 33, 82, 57, 97, 57, 30, 77, 52, 49, 44, 60, 91, 108, 76, 102, 112, 59, 0, 85, 77, 10, 75, 96, 61, 40, 9, 93, 41, 74, 11, 55, 123, 7, 94, 7, 49, 51,
				28, 92, 68, 32, 69, 108, 126, 50, 38, 122, 20, 50, 6, 109, 96, 15, 124, 99, 95, 15, 118, 97, 98, 63, 66, 31, 93, 117, 8, 19, 112, 69, 65, 79, 123, 34, 116, 96, 55, 116, 45, 1, 25, 114, 7, 102, 109, 19, 103, 22, 10,
				42, 47, 29, 13, 4, 124, 18, 81, 72, 31, 50, 71, 119, 49, 115, 22, 5, 84, 64, 8, 84, 79, 111, 85, 19, 82, 97, 9, 4, 99, 84, 18, 78, 10, 81, 30, 13, 80, 110, 10, 24, 81, 60, 93, 67, 120, 64, 20, 53, 95, 124,
				27, 79, 43, 121, 105, 20, 100, 71, 23, 113, 76, 35, 92, 38, 62, 67, 104, 77, 14, 63, 112, 38, 19, 95, 109, 29, 73, 8, 73, 100, 76, 26, 83, 108, 11, 28, 63, 10, 66, 102, 84, 116, 72, 1, 101, 66, 78, 26, 27, 46, 32,
				82, 17, 57, 114, 0, 75, 69, 57, 117, 78, 73, 120, 68, 82, 95, 103, 18, 17, 53, 46, 44, 122, 78, 6, 107, 67, 83, 52, 87, 94, 54, 73, 123, 120, 18, 82, 39, 26, 73, 121, 24, 34, 30, 90, 32, 18, 65, 19, 37, 115, 12,
				123, 8, 41, 23, 8, 100, 77, 44, 79, 121, 5, 17, 43, 78, 17, 52, 22, 4, 126, 93, 12, 60, 117, 110, 121, 1, 111, 56, 89, 46, 66, 40, 79, 4, 6, 37, 116, 93, 6, 50, 87, 121, 42, 34, 30, 66, 39, 32, 60, 24, 6,
				1, 16, 15, 34, 122, 2, 16, 80, 47, 126, 92, 21, 1, 48, 88, 81, 18, 26, 68, 44, 49, 122, 29, 107, 41, 67, 16, 118, 72, 46, 42, 79, 121, 62, 37, 117, 120, 5, 17, 89, 44, 40, 90, 115, 49, 44, 113, 20, 47, 112, 100,
				22, 52, 83, 33, 77, 70, 33, 67, 16, 10, 112, 103, 111, 58, 101, 73, 75, 62, 117, 94, 56, 1, 66, 23, 105, 99, 6, 12, 92, 66, 85, 18, 47, 38, 47, 119, 106, 109, 56, 53, 105, 108, 32, 114, 113, 6, 121, 5, 19, 120, 52,
				76, 126, 22, 94, 116, 51, 78, 4, 117, 23, 79, 108, 99, 75, 88, 23, 19, 41, 28, 103, 83, 116, 86, 68, 89, 7, 65, 33, 109, 30, 30, 1, 1, 119, 7, 8, 49, 114, 29, 1, 118, 22, 90, 39, 72, 59, 8, 13, 19, 7, 116,
				51, 28, 42, 98, 1, 35, 95, 94, 78, 80, 104, 22, 90, 37, 5, 22, 68, 50, 75, 47, 87, 114, 45, 75, 73, 28, 15, 64, 20, 108, 42, 17, 76, 76, 5, 5, 34, 4, 87, 17, 55, 16, 47, 34, 34, 25, 114, 35, 119, 110, 88,
				118, 105, 84, 30, 78, 63, 104, 81, 111, 80, 75, 23, 122, 103, 105, 117, 7, 57, 12, 119, 68, 34, 105, 10, 22, 77, 58, 60, 124, 74, 75, 103, 104, 62, 108, 104, 25, 52, 88, 55, 9, 19, 80, 90, 25, 110, 100, 101, 72, 20, 17,
				108, 119, 59, 123, 120, 39, 39, 96, 119, 85, 19, 101, 83, 38, 48, 25, 69, 123, 66, 64, 92, 9, 17, 97, 105, 31, 2, 24, 101, 17, 118, 27, 75, 59, 60, 37, 99, 125, 110, 103, 14, 3, 102, 125, 19, 7, 52, 53, 35, 79, 102,
				82, 110, 94, 32, 119, 30, 74, 82, 67, 2, 49, 98, 66, 107, 78, 98, 110, 51, 93, 120, 51, 17, 63, 67, 93, 4, 82, 42, 68, 30, 84, 88, 85, 125, 42, 101, 75, 47, 25, 79, 10, 101, 83, 33, 106, 35, 108, 94, 27, 33, 28}

			for i := 0; i < len(mat); i++ {
				if mat[i] != c_mat[i] {
					t.Errorf("matrices are not equal")
				}
			}
		}
*/
func TestFzVec(t *testing.T) {
	instance, err := vanilla.NewCROSS(common.RSDP_1_BALANCED)
	if err != nil {
		t.Errorf("Error creating instance: %v", err)
	}
	seed := []byte("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
	vec := instance.CSPRNG_fz_vec(seed)
	c_vec := []byte{6, 5, 2, 4, 5, 3, 2, 2, 1, 0, 0, 3, 1, 3, 1, 5, 4, 6, 2, 2, 1, 3, 0, 2, 6, 5, 1, 3, 3, 5, 2, 6, 1, 0, 3, 4, 2, 4, 3, 3, 5, 6, 5, 2, 1, 5, 2, 3, 1, 2, 1, 0, 4, 3, 3, 5, 4, 2, 5, 1, 5, 1, 6, 0, 4, 2, 0, 2, 5, 2, 3, 5, 4, 2, 2, 6, 4, 6, 4, 0, 0, 3, 5, 6, 1, 3, 5, 1, 2, 0, 2, 0, 1, 5, 6, 5, 1, 4, 3, 2, 4, 3, 0, 0, 6, 5, 3, 6, 4, 6, 2, 2, 6, 4, 3, 4, 6, 4, 3, 6, 4, 2, 3, 6, 0, 0, 6}
	if !bytes.Equal(vec, c_vec) {
		t.Errorf("vectors are not equal")
	}
}

func TestFpVec(t *testing.T) {
	instance, err := vanilla.NewCROSS(common.RSDP_1_BALANCED)
	if err != nil {
		t.Errorf("Error creating instance: %v", err)
	}
	seed := []byte("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
	vec := instance.CSPRNG_fp_vec(seed)
	c_vec := []byte{6, 121, 122, 53, 50, 9, 67, 69, 111, 58, 11, 112, 93, 117, 114, 79, 111, 106, 75, 10, 25, 18, 3, 37, 16, 125, 12, 7, 101, 42, 94, 36, 17, 42, 70, 10, 107, 74, 115, 100, 76, 80, 44, 18, 101, 49, 92, 95, 52, 0, 121, 51, 59, 72, 10, 100, 106, 36, 53, 88, 10, 43, 53, 46, 0, 10, 102, 59, 49, 49, 125, 84, 101, 82, 11, 0, 17, 18, 13, 1, 94, 124, 100, 94, 117, 31, 84, 82, 24, 115, 77, 67, 79, 26, 45, 43, 27, 64, 3, 90, 11, 125, 25, 108, 110, 125, 107, 103, 97, 64, 69, 122, 20, 87, 116, 8, 118, 72, 39, 91, 69, 13, 38, 88, 122, 0, 36}
	if !bytes.Equal(vec, c_vec) {
		t.Errorf("vectors are not equal")
	}
}

/*
func TestFpVecChall_1(t *testing.T) {
	instance, err := vanilla.NewCROSS(common.RSDP_1_BALANCED)
	seed := []byte("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
	vec, err := instance.CSPRNG_fp_vec_chall_1(seed)
	if err != nil {
		t.Errorf("Error generating vector: %v", err)
	}
	c_vec := []byte{39, 9, 51, 16, 25, 76, 19, 104, 112, 110, 66, 98, 35, 37, 63, 12, 63, 82, 75, 106, 84, 123, 3, 6, 125, 32, 9, 53, 96, 122, 122, 88, 10, 106, 115, 96, 84, 76, 106, 77, 118, 72, 87, 25, 126, 113, 84, 58, 53, 105, 44, 107, 43, 52, 17, 74, 40, 29, 30, 112, 109, 32, 17, 97, 46, 92, 75, 71, 123, 97, 116, 66, 98, 38, 126, 5, 109, 23, 46, 72, 35, 84, 7, 57, 79, 35, 126, 84, 74, 34, 91, 13, 96, 18, 110, 88, 24, 1, 12, 32, 2, 74, 72, 94, 108, 2, 93, 79, 72, 109, 3, 104, 23, 40, 94, 45, 102, 47, 15, 119, 94, 6, 124, 16, 75, 81, 111, 1, 47, 63, 73, 26, 70, 104, 56, 49, 27, 126, 87, 47, 119, 40, 89, 16, 74, 120, 109, 22, 107, 5, 59, 93, 116, 77, 55, 17, 35, 38, 77, 53, 92, 25, 27, 95, 111, 58, 88, 104, 25, 6, 37, 105, 65, 107, 14, 44, 94, 57, 75, 62, 47, 69, 68, 81, 69, 28, 77, 103, 64, 97, 89, 77, 52, 2, 74, 100, 67, 74, 122, 88, 107, 107, 26, 18, 109, 117, 101, 68, 81, 47, 121, 51, 3, 52, 43, 94, 31, 43, 85, 81, 25, 81, 69, 14, 3, 77, 104, 99, 78, 104, 12, 60, 89, 23, 87, 88, 35, 114, 81, 49, 124, 48, 44, 15, 60, 103, 19, 51, 97, 4, 59, 47, 70, 98, 18, 32}
	if !bytes.Equal(vec, c_vec) {
		t.Errorf("vectors are not equal")
	}
}*/

func TestFzInfW(t *testing.T) {
	instance, err := vanilla.NewCROSS(common.RSDP_G_1_BALANCED)
	if err != nil {
		t.Errorf("Error creating instance: %v", err)
	}
	seed := []byte("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
	vec := instance.CSPRNG_fz_inf_w(seed)
	c_vec := []byte{126, 87, 88, 19, 61, 0, 75, 61, 74, 86, 43, 6, 23, 55, 54, 21, 7, 70, 98, 45, 93, 74, 87, 118, 81}
	if !bytes.Equal(vec, c_vec) {
		t.Errorf("vectors are not equal")
	}
}
func TestFzMat(t *testing.T) {
	instance, err := vanilla.NewCROSS(common.RSDP_G_1_BALANCED)
	if err != nil {
		t.Errorf("Error creating instance: %v", err)
	}
	seed := []byte("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
	vec, _ := instance.CSPRNG_fz_mat(seed)
	if err != nil {
		t.Errorf("Error generating vector: %v", err)
	}
	c_vec := []byte{15, 114, 41, 75, 27, 8, 15, 19, 57, 0, 47, 32, 86, 0, 9, 117, 50, 122, 79, 107, 51, 108, 17, 27, 20, 84, 125, 6, 52, 106,
		82, 65, 107, 86, 78, 29, 90, 24, 46, 100, 93, 13, 20, 97, 101, 8, 95, 63, 54, 122, 45, 24, 106, 113, 51, 13, 21, 32, 75, 21,
		78, 3, 102, 24, 104, 46, 77, 65, 8, 100, 85, 54, 115, 37, 110, 25, 101, 85, 122, 59, 50, 33, 33, 39, 116, 96, 61, 82, 86, 91,
		106, 107, 68, 124, 76, 107, 34, 65, 23, 38, 29, 81, 29, 81, 98, 51, 81, 1, 11, 74, 26, 5, 19, 26, 46, 74, 69, 24, 29, 107,
		76, 41, 84, 54, 8, 72, 87, 107, 10, 12, 124, 17, 0, 83, 107, 83, 31, 94, 63, 43, 101, 23, 103, 122, 49, 101, 62, 48, 40, 119,
		42, 95, 2, 108, 55, 78, 19, 0, 47, 38, 14, 43, 103, 14, 27, 69, 119, 50, 96, 48, 106, 89, 19, 56, 124, 11, 60, 106, 14, 94,
		118, 19, 68, 17, 1, 36, 53, 29, 113, 57, 122, 81, 47, 59, 78, 5, 94, 106, 78, 99, 34, 1, 25, 83, 73, 60, 29, 125, 65, 124,
		10, 13, 61, 44, 9, 9, 99, 17, 2, 57, 13, 8, 71, 74, 63, 59, 83, 28, 0, 72, 118, 54, 105, 86, 50, 26, 47, 107, 123, 106,
		71, 80, 26, 97, 72, 2, 62, 63, 118, 116, 36, 28, 40, 108, 11, 50, 31, 24, 77, 23, 44, 56, 2, 37, 80, 32, 120, 17, 69, 107,
		65, 14, 41, 58, 0, 125, 121, 2, 52, 98, 52, 60, 56, 35, 104, 47, 99, 92, 60, 24, 102, 115, 26, 17, 89, 73, 14, 30, 72, 104,
		56, 55, 61, 3, 123, 124, 123, 89, 53, 97, 4, 41, 27, 90, 115, 55, 83, 31, 27, 38, 10, 119, 82, 107, 82, 27, 27, 57, 119, 79,
		126, 85, 125, 84, 1, 123, 63, 77, 6, 114, 78, 74, 74, 89, 82, 39, 74, 78, 97, 13, 120, 5, 29, 41, 71, 33, 122, 17, 101, 118,
		111, 113, 94, 8, 8, 117, 79, 20, 102, 76, 121, 17, 71, 2, 57, 88, 59, 9, 70, 56, 78, 53, 39, 41, 34, 125, 96, 58, 112, 107,
		20, 50, 59, 119, 6, 29, 44, 122, 81, 26, 0, 24, 22, 115, 87, 1, 11, 84, 54, 56, 61, 14, 26, 126, 52, 119, 8, 23, 79, 3,
		31, 78, 85, 33, 126, 64, 4, 96, 101, 28, 46, 76, 99, 97, 38, 88, 3, 102, 57, 118, 94, 114, 59, 25, 54, 47, 96, 0, 36, 47,
		79, 104, 42, 77, 23, 0, 54, 97, 80, 77, 66, 44, 79, 117, 38, 31, 37, 77, 78, 46, 15, 108, 67, 98, 83, 79, 31, 109, 105, 7,
		4, 86, 26, 86, 112, 27, 78, 91, 66, 43, 75, 104, 55, 61, 77, 65, 109, 11, 113, 36, 26, 101, 123, 103, 101, 9, 9, 123, 97, 20,
		120, 99, 65, 35, 28, 95, 19, 122, 20, 64, 87, 50, 120, 111, 101, 98, 88, 21, 113, 37, 89, 114, 106, 52, 68, 62, 114, 69, 106, 16,
		61, 115, 27, 118, 11, 64, 31, 37, 8, 32, 115, 74, 113, 24, 101, 106, 113, 90, 41, 94, 94, 82, 4, 5, 83, 113, 16, 87, 48, 85,
		88, 23, 4, 107, 91, 28, 107, 37, 21, 16, 37, 26, 126, 125, 63, 120, 1, 29, 61, 30, 48, 0, 96, 41, 123, 4, 108, 50, 39, 106,
		7, 106, 111, 101, 17, 11, 65, 52, 3, 112, 38, 78, 1, 5, 25, 6, 96, 60, 33, 79, 47, 35, 11, 120, 55, 122, 114, 87, 76, 56,
		74, 88, 14, 2, 41, 11, 8, 10, 11, 84, 94, 42, 124, 11, 25, 12, 73, 116, 100, 43, 55, 118, 29, 18, 29, 37, 53, 92, 116, 85,
		35, 33, 115, 73, 10, 119, 83, 60, 31, 0, 79, 83, 45, 7, 29, 78, 57, 4, 104, 111, 117, 76, 10, 86, 67, 109, 36, 36, 19, 36,
		68, 60, 112, 90, 51, 71, 14, 22, 8, 102, 14, 72, 63, 94, 41, 22, 107, 51, 109, 90, 98, 73, 95, 123, 80, 88, 49, 91, 104, 125,
		56, 7, 38, 3, 32, 100, 46, 71, 9, 34, 126, 6, 104, 116, 100, 47, 35, 50, 79, 54, 62, 64, 74, 108, 116, 81, 77, 5, 95, 11}
	if !bytes.Equal(vec, c_vec) {
		t.Errorf("vectors are not equal")
	}
}

func TestExpandDigestFixedWeight(t *testing.T) {
	instance, err := vanilla.NewCROSS(common.RSDP_1_BALANCED)
	if err != nil {
		t.Errorf("Error creating instance: %v", err)
	}
	digest := []byte("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
	vec := instance.Expand_digest_to_fixed_weight(digest)
	c_vec := []byte{1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
	for i := 0; i < len(vec); i++ {
		var val bool
		if c_vec[i] == 1 {
			val = true
		} else {
			val = false
		}
		if vec[i] != val {
			t.Errorf("vectors are not equal")
		}
	}
}
